<?php

declare(strict_types=1);

namespace TomWilford\SlimSqids;

use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Slim\Routing\RouteContext;
use Sqids\Sqids;

/**
 * Middleware for Slim that automatically decodes any route arguments with names containing "sqid".
 *
 * This middleware scans the current request for route arguments whose keys include the substring "sqid".
 * When such an argument is found, its value is decoded using the provided Sqids instance and then updated.
 */
final class SqidsMiddleware implements MiddlewareInterface
{
    /**
     * Constructor.
     *
     * Receives a Sqids instance via dependency injection. This instance is used to decode encoded IDs.
     * Alternatively, the global Sqids configuration may be applied via GlobalSqidConfiguration.
     *
     * @param ?Sqids $sqids The Sqids instance used for decoding.
     */
    public function __construct(private ?Sqids $sqids = null)
    {
        if ($sqids === null) {
            $this->sqids = GlobalSqidConfiguration::get();
        }
    }

    /**
     * Processes the request to decode any encoded route arguments.
     *
     * This method retrieves the current route from the request and examines its arguments. For each
     * argument with a key containing "sqid" (case-insensitive), the middleware decodes the argument's value
     * using the Sqids instance and updates the route with the decoded value.
     *
     * After processing, the request is forwarded to the next handler in the middleware chain.
     *
     * @param Request $request The incoming server request.
     * @param RequestHandler $handler The next request handler in the middleware chain.
     * @return Response The response generated by the next handler.
     */
    public function process(Request $request, RequestHandler $handler): Response
    {
        $routeContext = RouteContext::fromRequest($request);
        $route = $routeContext->getRoute();

        if ($route !== null) {
            $sqids = $this->sqids;
            $arguments = $route->getArguments();
            if (!empty($arguments)) {
                array_walk(
                    $arguments,
                    function (&$value, $key) use ($sqids) {
                        if (str_contains(strtolower($key), 'sqid')) {
                            $value = $sqids?->decode($value)[0];
                        }
                    }
                );
                $route->setArguments($arguments);
            }
        }

        return $handler->handle($request);
    }
}
